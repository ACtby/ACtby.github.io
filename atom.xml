<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OItby的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://actby.github.io/"/>
  <updated>2020-03-05T00:55:28.874Z</updated>
  <id>https://actby.github.io/</id>
  
  <author>
    <name>OItby</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「NOIp2006」能量项链</title>
    <link href="https://actby.github.io/2020/02/28/%E3%80%8CNOIp2006%E3%80%8D%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/"/>
    <id>https://actby.github.io/2020/02/28/%E3%80%8CNOIp2006%E3%80%8D%E8%83%BD%E9%87%8F%E9%A1%B9%E9%93%BE/</id>
    <published>2020-02-28T14:29:30.000Z</published>
    <updated>2020-03-05T00:55:28.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>在$Mars$星球上，每个$Mars$人都随身佩带着一串能量项链。在项链上有$N$颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是$Mars$人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为$m$，尾标记为$r$，后一颗能量珠的头标记为r，尾标记为$n$，则聚合后释放的能量为$m \times r \times n$（$Mars$单位），新产生的珠子的头标记为$m$，尾标记为$n$。 需要时，$Mars$人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。 例如：设$N=4$，$4$颗珠子的头标记与尾标记依次为$(2,3) (3,5) (5,10) (10,2)$。我们用记号⊕表示两颗珠子的聚合操作，($j$⊕$k$)表示第$j,k$两颗珠子聚合后所释放的能量。则第$4$、$1$两颗珠子聚合后释放的能量为： ($4$⊕$1$)$=10 \times 2 \times 3=60$。 这一串项链可以得到最优值的一个聚合顺序所释放的总能量为： (($4$⊕$1$)⊕$2$)⊕$3$）=$10 \times 2 \times 3+10 \times 3 \times 5+10 \times 5 \times 10=710$。</p><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第一行是一个正整数$N(4≤N≤100)$，表示项链上珠子的个数。第二行是$N$个用空格隔开的正整数，所有的数均不超过$1000$。第$i$个数为第$i$颗珠子的头标记$(1≤i≤N)$，当$i&lt;N$时，第$i$颗珠子的尾标记应该等于第$i+1$颗珠子的头标记。第$N$颗珠子的尾标记应该等于第$1$颗珠子的头标记。</p><p>至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>一个正整数$E(E≤2.1 \times (10)^9)$，为一个最优聚合顺序所释放的总能量。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">710</span></span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是一个区间合并DP</span></span><br><span class="line"><span class="comment">由于是圆环，所以我们的第一步是将圆展开成线</span></span><br><span class="line"><span class="comment">接下来，设f[i][j]表示合并闭区间[i,j]所获得的最大能量</span></span><br><span class="line"><span class="comment">接下来推一下状态</span></span><br><span class="line"><span class="comment">我们令待合并的两个区间为f[l1][r1],f[l2][r2]</span></span><br><span class="line"><span class="comment">很显然l2=r1+1</span></span><br><span class="line"><span class="comment">于是f[l1][r2]=max&#123;f[l1][r1]+f[r1+1][r2]+a[l1]*a[r1+1]*a[r2+1]&#125;</span></span><br><span class="line"><span class="comment">再考虑一下r1的取值范围</span></span><br><span class="line"><span class="comment">因为一个闭区间[l,r]最少包括一个元素</span></span><br><span class="line"><span class="comment">所以l1&lt;=r1,r1+1&lt;=r2</span></span><br><span class="line"><span class="comment">变形并合并得l1&lt;=r1&lt;r2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">250</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N],f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">int</span> n2=n+n;<span class="comment">//减少常数计算</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i+n]=a[i];</span><br><span class="line">a[n2+<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n2<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)<span class="comment">//i即l1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=min(i+n<span class="number">-1</span>,n2);++j)</span><br><span class="line"><span class="comment">//j即r2，此处有一个优化，因为最多只有n个珠子</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;++k)<span class="comment">//i即r1</span></span><br><span class="line">f[i][j]=max(f[i][j],f[i][k]+f[k+<span class="number">1</span>][j]+a[i]*a[k+<span class="number">1</span>]*a[j+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) Ans=max(Ans,f[i][i+n<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">思路二</span></span><br><span class="line"><span class="comment">f[][]数组的含义同上</span></span><br><span class="line"><span class="comment">我们算f[][]数组可以根据区间的长度</span></span><br><span class="line"><span class="comment">状态转移方程同上</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">250</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N],f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">int</span> n2=n+n;<span class="comment">//减少常数计算</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i+n]=a[i];</span><br><span class="line">a[n2+<span class="number">1</span>]=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=n2-i;j&gt;=<span class="number">1</span>;--j)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+i;++k)</span><br><span class="line">f[j][j+i]=max(f[j][j+i],f[j][k]+f[k+<span class="number">1</span>][j+i]+a[j]*a[k+<span class="number">1</span>]*a[j+i+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> Ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) Ans=max(Ans,f[i][i+n<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;在$Mars$星球上，每个$Mars$人都随身佩带着一串能量项链。在项链上有$N$颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是$Mars$人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为$m$，尾标记为$r$，后一颗能量珠的头标记为r，尾标记为$n$，则聚合后释放的能量为$m \times r \times n$（$Mars$单位），新产生的珠子的头标记为$m$，尾标记为$n$。 需要时，$Mars$人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。 例如：设$N=4$，$4$颗珠子的头标记与尾标记依次为$(2,3) (3,5) (5,10) (10,2)$。我们用记号⊕表示两颗珠子的聚合操作，($j$⊕$k$)表示第$j,k$两颗珠子聚合后所释放的能量。则第$4$、$1$两颗珠子聚合后释放的能量为： ($4$⊕$1$)$=10 \times 2 \times 3=60$。 这一串项链可以得到最优值的一个聚合顺序所释放的总能量为： (($4$⊕$1$)⊕$2$)⊕$3$）=$10 \times 2 \times 3+10 \times 3 \times 5+10 \times 5 \times 10=710$。&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://ACtby.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="https://ACtby.github.io/tags/DP/"/>
    
      <category term="NOIP" scheme="https://ACtby.github.io/tags/NOIP/"/>
    
      <category term="2006" scheme="https://ACtby.github.io/tags/2006/"/>
    
      <category term="区间DP" scheme="https://ACtby.github.io/tags/%E5%8C%BA%E9%97%B4DP/"/>
    
      <category term="提高组" scheme="https://ACtby.github.io/tags/%E6%8F%90%E9%AB%98%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>「NOIp2003」加分二叉树</title>
    <link href="https://actby.github.io/2020/02/27/%E3%80%8CNOIp2003%E3%80%8D%E5%8A%A0%E5%88%86%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://actby.github.io/2020/02/27/%E3%80%8CNOIp2003%E3%80%8D%E5%8A%A0%E5%88%86%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-02-27T15:42:35.000Z</published>
    <updated>2020-03-06T00:27:13.009Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>设一个n个节点的二叉树tree的中序遍历为（1,2,3,…,n），其中数字1,2,3,…,n为节点编号。</p><p>每个节点都有一个分数（均为正整数），记第i个节点的分数为$d_i$，tree及它的每个子树都有一个加分，任一棵子树subtree（也包含tree本身）的加分计算方法如下：</p><p>subtree的左子树的加分 × subtree的右子树的加分 ＋ subtree的根的分数</p><p>若某个子树为空，规定其加分为1。叶子的加分就是叶节点本身的分数，不考虑它的空子树。</p><p>试求一棵符合中序遍历为（1,2,3,…,n）且加分最高的二叉树tree。</p><p>要求输出：</p><p>（1）tree的最高加分</p><p>（2）tree的前序遍历</p><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><p>第1行：一个整数n，为节点个数。</p><p>第2行：n个用空格隔开的整数，为每个节点的分数（0&lt;分数&lt;100）。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>第1行：一个整数，为最高加分（结果不会超过4,000,000,000）。</p><p>第2行：n个用空格隔开的整数，为该树的前序遍历。如果存在多种方案，则输出字典序最小的方案。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">2</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">145</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><p>$n &lt; 30$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>题目给定了一棵中序遍历的树，要我们求给定了一定计算方式后最大的前序遍历的树</p><p>我用的是$DP$，用$f[i][j]$表示$[i,j]$这个闭区间构成的一棵中序遍历树的最大值</p><p>这显然就变成了一个区间合并问题</p><p>状态转移方程为$f[i][j]=max(f[i][k-1]*f[k+1][j]+a[k])$，$k$枚举闭区间$[i,j]$的根，显然$k\epsilon [i,j]$</p><p>再考虑边界条件，$f[i][j]$代表的为叶子结点，$f[i][i-1]$代表空子树，根据题意，于是就有了$f[i][i]=a[i],f[i][i-1]=1$</p><p>最终题目要输出前序遍历，于是我们加一个$root[i][j]$数组记录使$f[i][j]$最大的$k$(即根的下标)，放在循环里面就可以了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n,a[N],f[N][N],root[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;<span class="built_in">printf</span>(<span class="string">"%d "</span>,l); <span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,root[l][r]);</span><br><span class="line">    Output(l,root[l][r]<span class="number">-1</span>),Output(root[l][r]+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;++i)</span><br><span class="line">        f[i][i]=a[i],f[i][i<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=j;++k)<span class="comment">//枚举[i,j]这个闭区间内的根</span></span><br><span class="line">                <span class="keyword">if</span>(f[i][j]&lt;(f[i][k<span class="number">-1</span>]*f[k+<span class="number">1</span>][j]+a[k]))</span><br><span class="line">                &#123;</span><br><span class="line">                    f[i][j]=f[i][k<span class="number">-1</span>]*f[k+<span class="number">1</span>][j]+a[k];</span><br><span class="line">                    root[i][j]=k;</span><br><span class="line">                &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[<span class="number">1</span>][n]);</span><br><span class="line">    Output(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;设一个n个节点的二叉树tree的中序遍历为（1,2,3,…,n），其中数字1,2,3,…,n为节点编号。&lt;/p&gt;
&lt;p&gt;每个节点都有一个分数（均为正整数），记第i个节点的分数为$d_i$，tree及它的每个子树都有一个加分，任一棵子树subtree（也包含tree本身）的加分计算方法如下：&lt;/p&gt;
&lt;p&gt;subtree的左子树的加分 × subtree的右子树的加分 ＋ subtree的根的分数&lt;/p&gt;
&lt;p&gt;若某个子树为空，规定其加分为1。叶子的加分就是叶节点本身的分数，不考虑它的空子树。&lt;/p&gt;
&lt;p&gt;试求一棵符合中序遍历为（1,2,3,…,n）且加分最高的二叉树tree。&lt;/p&gt;
&lt;p&gt;要求输出：&lt;/p&gt;
&lt;p&gt;（1）tree的最高加分&lt;/p&gt;
&lt;p&gt;（2）tree的前序遍历&lt;/p&gt;
    
    </summary>
    
    
      <category term="题解" scheme="https://ACtby.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="DP" scheme="https://ACtby.github.io/tags/DP/"/>
    
      <category term="NOIP" scheme="https://ACtby.github.io/tags/NOIP/"/>
    
      <category term="区间DP" scheme="https://ACtby.github.io/tags/%E5%8C%BA%E9%97%B4DP/"/>
    
      <category term="提高组" scheme="https://ACtby.github.io/tags/%E6%8F%90%E9%AB%98%E7%BB%84/"/>
    
      <category term="2003" scheme="https://ACtby.github.io/tags/2003/"/>
    
  </entry>
  
  <entry>
    <title>「」博文模板</title>
    <link href="https://actby.github.io/2020/02/26/%E3%80%8C%E3%80%8D%E5%8D%9A%E6%96%87%E6%A8%A1%E6%9D%BF/"/>
    <id>https://actby.github.io/2020/02/26/%E3%80%8C%E3%80%8D%E5%8D%9A%E6%96%87%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-02-26T15:26:29.000Z</published>
    <updated>2020-03-04T11:11:44.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><a id="more"></a><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h2><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h2&gt;
    
    </summary>
    
    
      <category term="博客有关" scheme="https://ACtby.github.io/categories/%E5%8D%9A%E5%AE%A2%E6%9C%89%E5%85%B3/"/>
    
    
      <category term="博文模板" scheme="https://ACtby.github.io/tags/%E5%8D%9A%E6%96%87%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
</feed>
